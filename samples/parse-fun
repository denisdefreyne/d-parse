#!/usr/bin/env ruby
# frozen_string_literal: true

require 'd-parse'

data = <<~DATA
  add(1, mul(2, 3))
  mul(2,3)
DATA

include DParse::DSL # rubocop:disable Style/MixinUsage

# primitives
digit = describe(alt(*('0'..'9').map { |c| char(c) }), 'digit')
letter = describe(alt(*('a'..'z').map { |c| char(c) }), 'letter')
lparen = char('(')
rparen = char(')')
comma = char(',')

# basic
identifier = describe(seq(letter, repeat(letter)).capture, 'identifier')
lit = seq(digit, repeat(digit)).capture.map { |d| d.to_i(10) }
eof_with_opt_nl = seq(opt(char("\n")), eof)
whitespace = repeat(whitespace_char)

# complex
funcall = nil
expression = alt(lazy { funcall }, lit)
arglist_tail = repeat(seq(comma, whitespace, expression).map { |d| d[2] })
arglist = seq(expression, arglist_tail).map { |d| [d[0]] + d[1] }
funcall = seq(identifier, lparen, arglist, rparen).map { |d| [d[0]] + d[2] }
program = seq(intersperse(expression, char("\n")).select_even, eof_with_opt_nl).first

def eval_expr(expr)
  case expr
  when Array
    case expr[0]
    when 'add'
      eval_expr(expr[1]) + eval_expr(expr[2])
    when 'mul'
      eval_expr(expr[1]) * eval_expr(expr[2])
    else
      raise '???'
    end
  when Integer
    expr
  else
    raise '???'
  end
end

res = program.apply(data)
case res
when DParse::Success
  exprs = res.data
  pp exprs
  exprs.each { |e| p eval_expr(e) }
when DParse::Failure
  warn res.pretty_message
  exit 1
end
